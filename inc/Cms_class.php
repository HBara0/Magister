<?php

class Cms {
    protected $settings_file_path = "modules/cms/cmssettings.php";
    private $status;
    protected $settings = array();
    protected $ftpconnection;

    public function __construct($source = '', $simple = true) {
        if($source == 'file') {
            $this->read_settings_file();
        }
        elseif($source == 'db') {
            $this->read_settings_db($simple);
        }
    }

    protected function read_settings_db($simple = true) {
        global $db;

        $query_select = 'name, value';
        if($simple == false) {
            $query_select = '*';
        }
        $query = $db->query('SELECT '.$query_select.' FROM '.Tprefix.'cms ORDER BY name ASC');
        if($query) {
            while($setting = $db->fetch_assoc($query)) {
                if($simple == true) {
                    $this->settings[$setting['name']] = $setting['value'];
                }
                else {
                    $this->settings[$setting['name']] = $setting;
                }
            }
            return $this->settings;
        }
        else {
            $this->status = 4;
            return false;
        }

        $this->status = 0;
        return true;
    }

    private function read_settings_file() {
        require_once ROOT.$this->settings_file_path;

        $this->settings = &$settings;
    }

    public function update_settings(array $settings) {
        global $core, $db;

        foreach($settings as $key => $val) {
            if(value_exists('cms', 'name', $key)) {
                $db->update_query('cms', array('value' => $val), 'name="'.$db->escape_string($key).'"');
            }
        }

        $this->status = 0;
        return true;
    }

    public function add_settings(array $settings) {

    }

    public function get_country_bysubdomain() {
        global $core;
        $host = $core->sanitize_inputs($_SERVER['HTTP_HOST']);
        $start = strpos($host, '.'.DOMAIN);
        return substr($host, $start - 2, 2);
    }

    public function rebuild_settings() {
        global $db, $core;
        if(empty($this->settings)) {
            $this->read_settings_db();
        }
        if(!file_exists(ROOT.$this->settings_file_path)) {
            $mode = "x";
        }
        else {
            $mode = "w";
        }

        foreach($this->settings as $name => $value) {
            $value = str_replace("\"", "\\\"", $value);
            $settings .= "\$settings['".$name."'] = \"".$value."\";\n";
        }
        $settings = '<'."?php\n/*********************************\ \n  DO NOT EDIT THIS FILE\n PLEASE USE the CMS Module\n\*********************************/\n\n".$settings."\n?".'>';
        $file = @fopen(ROOT.$this->settings_file_path, $mode);
        $write = @fwrite($file, $settings);
        @fclose($file);

        if($write !== false) {
            $this->status = 0;
            return true;
        }
        else {
            $this->status = 5;
            return false;
        }
    }

    protected static function generate_alias($string) {
        global $core;

        $string = trim(str_replace(' ', '-', $string));
        $string = $core->sanitize_inputs($string, array('removetags' => true));
        $string = preg_replace('/[\@\!\&\(\)$%\^\*\+\#\/\\,.;:=]+/i', '', $string);
        $string = strtolower($string);
        return $string;
    }

    public function copy_file_ftp(array $source, array $destination) {
        if(!isset($this->ftpconnection)) {
            $this->establish_ftp();
        }
        $upload = ftp_put($this->ftpconnection, $destination['path'].$destination['filename'], $source['path'].$source['filename'], FTP_BINARY);
        if($upload == false) {
            ftp_close($this->ftpconnection);
            return false;
        }
        if(strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {
            $chmod = ftp_chmod($this->ftpconnection, 0644, $destination['path'].$destination['filename']);
        }
        return true;
    }

    protected function establish_ftp() {
        $this->read_settings_file();
        if(!isset($this->settings['ftpserver'], $this->settings['ftpusername'], $this->settings['ftppassword'])) {
            return false;
        }

        if(is_empty($this->settings['ftpserver'], $this->settings['ftpusername'], $this->settings['ftppassword'])) {
            return false;
        }

        $connection = ftp_connect($this->settings['ftpserver']);
        $login = ftp_login($connection, $this->settings['ftpusername'], $this->settings['ftppassword']);

        if(!$connection || !$login) {
            return false;
        }

        if($this->ftp_settings['passive'] == 1) {
            ftp_pasv($connection, true);
        }

        $this->ftpconnection = $connection;
    }

    public function get_settings() {
        return $this->settings;
    }

    public function get_status() {
        return $this->status;
    }

}
?>